// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  provider      String?   // 'google', 'kakao', 'naver'
  interests     String[]  // User selected interests
  password      String?   // For email/password auth
  bio           String?   // User bio/description
  socialLinks   Json?     // Social media links
  isVerified    Boolean   @default(false)
  isActive      Boolean   @default(true)
  role          String    @default("user") // 'user', 'moderator', 'admin', 'super_admin'
  lastLoginAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts       Account[]
  sessions       Session[]
  memes          Meme[]
  likes          Like[]
  comments       Comment[]
  passwordResets PasswordReset[]
  reports        Report[] @relation("UserReports")
  reviewedReports Report[] @relation("UserReviews")
  adminLogs      AdminLog[] @relation("AdminActions")
  
  // Social features
  followers      Follow[] @relation("UserFollowers")
  following      Follow[] @relation("UserFollowing")
  bookmarks      Bookmark[]
  collections    Collection[]
  commentLikes   CommentLike[]
  notifications  Notification[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Meme {
  id            String   @id @default(cuid())
  title         String?
  imageUrl      String
  templateId    String?
  textBoxes     Json?     // Array of text boxes with positions and content (nullable for uploaded images)
  isPublic      Boolean  @default(true)
  likesCount    Int      @default(0)
  viewsCount    Int      @default(0)
  sharesCount   Int      @default(0)
  downloadsCount Int     @default(0)
  tags          String[] // Meme tags for categorization
  description   String?  // Optional description
  isAiGenerated Boolean  @default(false)
  cloudinaryPublicId String? // Cloudinary public ID for image management
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  userId   String
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  template Template? @relation(fields: [templateId], references: [id])
  likes    Like[]
  comments Comment[]
  bookmarks Bookmark[]
  collectionItems CollectionItem[]
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  memeId    String
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  meme Meme @relation(fields: [memeId], references: [id], onDelete: Cascade)

  @@unique([userId, memeId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  isEdited  Boolean  @default(false)
  likesCount Int     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId String
  memeId String
  parentId String? // 대댓글 지원
  
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  meme   Meme @relation(fields: [memeId], references: [id], onDelete: Cascade)
  parent Comment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies Comment[] @relation("CommentReplies")
  likes  CommentLike[]
  
  @@index([memeId])
  @@index([parentId])
  @@index([userId])
}

model Template {
  id          String   @id @default(cuid())
  name        String
  imageUrl    String
  category    String   // 'popular', 'animal', 'trending', 'emotion'
  textBoxes   Json     // Default text box configurations
  isActive    Boolean  @default(true)
  usageCount  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  memes Meme[]
}

model PasswordReset {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  userId String
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Report {
  id          String   @id @default(cuid())
  type        String   // 'meme', 'user', 'comment'
  targetId    String   // ID of reported content
  reason      String   // 'spam', 'inappropriate', 'copyright', 'harassment', 'fake', 'other'
  description String?  // Additional details
  status      String   @default("pending") // 'pending', 'reviewing', 'resolved', 'dismissed'
  priority    String   @default("medium") // 'low', 'medium', 'high', 'critical'
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  resolvedAt  DateTime?
  
  // Relations
  reporterId String
  reporter   User @relation("UserReports", fields: [reporterId], references: [id], onDelete: Cascade)
  
  reviewerId String?
  reviewer   User? @relation("UserReviews", fields: [reviewerId], references: [id], onDelete: SetNull)
  
  @@index([type, targetId])
  @@index([status, priority])
  @@index([reporterId])
}

model AdminLog {
  id        String   @id @default(cuid())
  action    String   // Action performed
  targetType String  // 'user', 'meme', 'template', 'system'
  targetId  String?  // ID of target object
  metadata  Json?    // Additional action data
  createdAt DateTime @default(now())
  
  // Relations
  adminId String
  admin   User @relation("AdminActions", fields: [adminId], references: [id], onDelete: Cascade)
  
  @@index([adminId])
  @@index([action])
  @@index([targetType, targetId])
}

// Social Features Models

model Follow {
  id          String   @id @default(cuid())
  followerId  String   // 팔로우하는 사용자
  followingId String   // 팔로우받는 사용자
  createdAt   DateTime @default(now())
  
  follower    User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following   User @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)
  
  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  memeId    String
  createdAt DateTime @default(now())
  
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  meme      Meme @relation(fields: [memeId], references: [id], onDelete: Cascade)
  
  @@unique([userId, memeId])
  @@index([userId])
  @@index([memeId])
}

model Collection {
  id          String   @id @default(cuid())
  name        String
  description String?
  isPublic    Boolean  @default(false)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  items       CollectionItem[]
  
  @@index([userId])
  @@index([isPublic])
}

model CollectionItem {
  id           String   @id @default(cuid())
  collectionId String
  memeId       String
  order        Int      @default(0)
  createdAt    DateTime @default(now())
  
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  meme         Meme @relation(fields: [memeId], references: [id], onDelete: Cascade)
  
  @@unique([collectionId, memeId])
  @@index([collectionId, order])
}

model CommentLike {
  id        String   @id @default(cuid())
  userId    String
  commentId String
  createdAt DateTime @default(now())
  
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  
  @@unique([userId, commentId])
  @@index([userId])
  @@index([commentId])
}

// User Experience Enhancement Models

model Notification {
  id         String   @id @default(cuid())
  type       String   // 'like', 'comment', 'reply', 'follow', 'mention', 'bookmark', 'collection_add'
  title      String
  message    String
  isRead     Boolean  @default(false)
  data       Json?    // Additional data (meme info, user info, etc.)
  createdAt  DateTime @default(now())
  expiresAt  DateTime? // Optional expiration
  
  // Relations
  userId     String
  actorId    String?  // User who triggered the notification
  targetType String?  // 'meme', 'comment', 'user', 'collection'
  targetId   String?  // ID of the target object
  
  user       User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, isRead])
  @@index([userId, createdAt])
  @@index([type])
}

model Tag {
  id          String   @id @default(cuid())
  name        String   @unique
  usageCount  Int      @default(0)
  category    String?  // 'trending', 'popular', 'new'
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([name])
  @@index([usageCount])
  @@index([category])
}

model TrendingItem {
  id         String   @id @default(cuid())
  type       String   // 'meme', 'tag', 'template', 'user'
  targetId   String   // ID of the trending item
  score      Float    @default(0) // Trending score
  rank       Int      @default(0)
  period     String   // 'hour', 'day', 'week', 'month'
  data       Json?    // Additional metadata
  createdAt  DateTime @default(now())
  expiresAt  DateTime // When this trending record expires
  
  @@unique([type, targetId, period])
  @@index([type, period, rank])
  @@index([expiresAt])
}

model ActivityFeed {
  id         String   @id @default(cuid())
  userId     String   // Feed owner
  actorId    String   // User who performed the action
  actionType String   // 'create_meme', 'like_meme', 'comment', 'follow', 'bookmark', 'create_collection'
  targetType String   // 'meme', 'comment', 'user', 'collection'
  targetId   String   // ID of target object
  data       Json?    // Additional data
  createdAt  DateTime @default(now())
  
  @@index([userId, createdAt])
  @@index([actorId])
  @@index([actionType])
}