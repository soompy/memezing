// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  provider      String?   // 'google', 'kakao', 'naver'
  interests     String[]  // User selected interests
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts Account[]
  sessions Session[]
  memes    Meme[]
  likes    Like[]
  comments Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Meme {
  id          String   @id @default(cuid())
  title       String?
  imageUrl    String
  templateId  String?
  textBoxes   Json     // Array of text boxes with positions and content
  isPublic    Boolean  @default(true)
  likesCount  Int      @default(0)
  viewsCount  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId   String
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes    Like[]
  comments Comment[]
}

model Like {
  id     String @id @default(cuid())
  userId String
  memeId String

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  meme Meme @relation(fields: [memeId], references: [id], onDelete: Cascade)

  @@unique([userId, memeId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId String
  memeId String
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  meme   Meme @relation(fields: [memeId], references: [id], onDelete: Cascade)
}